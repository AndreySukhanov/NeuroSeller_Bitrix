# Generated by Django 5.2 on 2025-06-29 02:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('chat', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('max_history_length', models.IntegerField(default=50)),
                ('meeting_duration', models.IntegerField(default=3600, verbose_name='Длительность встречи в секундах')),
                ('time_offset', models.IntegerField(default=300)),
                ('time_zone', models.CharField(default='Asia/Yekaterinburg', max_length=255)),
                ('promt', models.TextField(blank=True, null=True)),
                ('crm_name', models.CharField(default='bitrix', max_length=255)),
                ('webhook', models.CharField(default='', max_length=255)),
                ('off_gpt_on_stage', models.CharField(blank=True, max_length=222, null=True, verbose_name='Название стадии, когда надо выключить gpt')),
                ('name', models.CharField(max_length=255)),
                ('content', models.TextField(null=True)),
                ('auth_domain', models.CharField(blank=True, max_length=250, null=True, unique=True)),
                ('daily_limit', models.IntegerField(default=1, null=True, verbose_name='Дневной лимит для сообщений помощника при возврате лида')),
                ('sleep_days', models.IntegerField(default=30, null=True, verbose_name='Лимит в днях для активации спящих лидов')),
                ('stat_code', models.URLField(blank=True, default=users.models.generate_unique_code)),
                ('use_topnlab', models.BooleanField(default=False, verbose_name='Topnlab')),
                ('api_key_topnlab', models.CharField(blank=True, max_length=255, null=True, verbose_name='Ключ апи для отрпавки в запросов в Topnlab')),
            ],
        ),
        migrations.CreateModel(
            name='AMOConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_id', models.CharField(max_length=255)),
                ('redirect_uri', models.CharField(max_length=500)),
                ('client_secret', models.CharField(max_length=255)),
                ('default_responsible_id', models.IntegerField()),
                ('task_type_id', models.IntegerField()),
                ('access_token', models.CharField(max_length=500)),
                ('refresh_token', models.CharField(max_length=500)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.company')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('crm_contact_id', models.CharField(blank=True, max_length=100, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_activity', models.DateTimeField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='users.company')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CompanyFunc',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt', models.TextField(verbose_name='Промт по которому gpt определит когда вызвать и какие аргументы передать')),
                ('func_context', models.CharField(blank=True, default='', max_length=255, null=True, verbose_name='В случае если есть несколько вызовов одной и той же функции, этот контекст припишется к её названию и создаст уникальность')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funcs', to='users.company')),
                ('func', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_funcs', to='chat.func')),
            ],
        ),
        migrations.CreateModel(
            name='CustomLeadField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_code', models.CharField(max_length=255, verbose_name="Код поля (например, 'LEAD_CLASSIFICATION')")),
                ('form_label', models.CharField(max_length=255, verbose_name='Название поля в форме')),
                ('column_label', models.CharField(max_length=255, verbose_name='Название колонки в списке')),
                ('user_type_id', models.CharField(max_length=255, verbose_name="Тип данных ('string', 'integer', 'enumeration', 'datetime' и т.д.)")),
                ('default_value', models.CharField(max_length=255, verbose_name='Значение по умолчанию')),
                ('xml_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='XML_ID для уникальности (если не указан, берётся field_code)')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lead_fields', to='users.company')),
            ],
        ),
        migrations.CreateModel(
            name='FunnelStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('use', models.BooleanField(default=True)),
                ('step_id', models.CharField(max_length=255)),
                ('status_id', models.CharField(max_length=255)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='funnel_steps', to='users.company')),
            ],
        ),
        migrations.CreateModel(
            name='OutgoingConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_message', models.TextField(verbose_name='исходящее сообщение')),
                ('stage_name', models.CharField(max_length=255)),
                ('wappi_token', models.CharField(max_length=244)),
                ('wappi_profile', models.CharField(max_length=223)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing', to='users.company')),
            ],
        ),
        migrations.CreateModel(
            name='Stat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stat', to='users.company')),
            ],
        ),
    ]
